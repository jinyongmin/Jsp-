                                요청(request)
        클라이언트      -------------------------------->    서버   '프로그램!'
        (브라우저)      <--------------------------------   (웹 서버)
                                응답(response)

요청(request)
- 클라이언트에서 서버쪽으로 HTML 문서를 요청하는 것
- 접근하고자 하는 페이지(URL)을 브라우저를 통해 알려줌
- GET, POST등 방식으로 요청

응답(response)
- 서버에서 결과를 HTML문서를 통해 클라이언트쪽으로 보여주는 것
- 상태코드(성공여부)와 컨텐츠타입(텍스트, 이미지, HTML, XML, JSON..등), 컨텐츠(HTML코드,이미지,문자열..등)을 전달   ex) 네이버 f12 wetwork에서 확인하기!

    https://v.daum.net/v/20221117090100454
    -----   ----------- -------------------
    프로토콜  도메인         자원위치

https(HyperText Transfer Protocal)
- TCP/IP 기반의 웹용 프로토콜
- Header와 Body로 구성
- 웹서버에서 서버 클라이언트 사이에 요청/응답이 가능하도록 만들어진 규약
- 서버가 먼저 클라이언트에게 데이터를 전달할 수 없음    (클라이언트가 웹 들어가서 요청을해야 서버가 데이터를 전달!)

TCP 포트
- 서버 하드웨어 상에서 돌아가는 소프트웨어를 구분하기 위한 숫자값
- 사용범위 : 0 ~ 65535(0 ~ 1023까지는 운영체제 또는 별도의 서비스를 사용하기 위해 예약) //Mysql번호!(3306) //브라우저(80) //ftp:21

웹서버(web server)
- 클라이언트로부터 요청을 받아 요청한 내용을 응답해주는 프로그램
- 정적인 페이지(html, css, 이미지, javascript)만 전달 
(브라우저가 특정 페이지 요청->서버 (웹서버프로그램 탑재) 웹서버 포트 80번 들어가서 
html.. 하드에 어떤거 연결해서 사용자에게 전달해줌 -->화면 구현) 
- 대표적인 웹서버 프로그램은 Apache, zeus, NGINX, IIS, Mongoose ...등
- 동적인 컨텐츠 생성이 불가능       ( 동적인 컨텐츠(자바, c 등등)를 만든것은 웹서버에서 안돌아감)

웹 어플리케이션 서버(web application server)    == was 와스 
- 동적인 부분을 담당
- 프로그램 실행 환경과 데이터베이스 접속 기능을 제공
- 대표적인 WAS는 Tomcat(webserver + was)        was???  Tomcat에서 자바 등등 여러가지를 넣어서 돌릴 수 있음!


Tomcat 공식 홈페이지
https://tomcat.apache.org/download-90.cgi

포트번호 8080서버 나중에 서비스할때 80으로바꾸면됨
설치할 때 아이디 비밀번호 적어주면 피곤해짐 적지x!

서버 페이지 실행
http://127.0.0.1:8080

Tomcat 폴더
bin: 아파치 실행파일들어가있음
conf: 설정파일
lib: 라이브러리
webapps: 홈디렉토리(여기에 넣으면 웹사이트가 돌아감!) (webapps ->Root)


JSP(Java Server Pages)


out.println();       -->stream을통해 만들어진 객체를 println!
out.println("<html>");      X!
out.println();
out.println();

ASP, PHP
- HTML코드에 자바코드를 넣어 동적 웹페이지를 생성하는 웹 어플리케이션 도구(서버 스크립트)   <라인별로 인터프린터처럼 한줄한줄읽어옴 느림!>
- JSP가 실행되면 자바 서블릿(Servlet)으로 변환되며 웹 어플리케이션 서버에서 동작하여 필요한 기능을 수행하고 생성된 데이터를 웹페이지와 함께 클라이언트로 전달

                    xxx.jsp
        클라이언트 --------------------> 서블릿 컨테이너
                                        jsp -> servlet 파일로 변환(자바파일) (ex) out.println으로 변환 )
                                        servlet -> class 파일로 컴파일       
                                        class ->html 형태로 변환 --->jsp.. 여러단계 거쳐야하고 느림!

JSP 장점!
- Java 코드에 HTML 코드가 삽입되는 문제를 해결
    out.println("<h1>안녕하세요</h1>"); X!
    <% 
        System.out.println("안녕"); 
    
        %>
        <h1>안녕하세요</h1>     //html
- 퍼블리셔와 협업이 가능
- 간단한 페이지를 구현할 때는 JSP문서로 제작하는 것이 시간을 절약
-- 사용자는 소스를 볼 수 없음!

JSP 단점
- 복잡한 로직을 구현할 때 HTML 중심의 코드가 이해하기 어렵게 만들 수 있음
- 프로그래밍 언어를 모르는 사람이 실수로 코드를 망칠 수 있음
-core 적인 부분의 로직의 유출을 막기 위해 Java 파일로 따로 작성하는 것이 보안상 유리

JSP 문법(@)

디렉티브 태그
- 현재 JSP 페이지에 대한 정보를 설정하는 태그
- 페이지 최상단에 선언


					<%@ page ~~~~    %>
					
import: 자바 클래스를 현재 페이지에 사용(임포트!)
language: 사용할 프로그래밍 언어를 설정
contentType: 생성할 문서의 컨텐츠 유형
pageEncoding: 페이지 문자 인코딩을 설정
include: 화면에 다른 파일을 포함

스크립트릿(%)
- 자바 변수 선언 및 자바 로직코드를 작성하는데 사용하는 코드

			<%	~~~~~~~~~~~~		%>		~~에서 자바가 먹힘
			
표현문
- 변수, 계산식, 메소드호출등 결과를 나타내는 태그
- 타입은 항상 문자열


			<%= 변수 또는 계산식 등... 작성	%>
			
선언문	(!)
- 자바 변수나 메소드를 정의하는데 사용하는 태그

	<%!	~~~~~~~~~	%>
	
	
데이터 요청
get 방식
- 간단한 요청을 보낼 때 사용
- 내용의 크기가 제한적
- 데이터가 노출(URL)
- URL뒤에 전송할 데이터를 붙여서 보냄
- 단순히 서버에게 자원을 요청할 때 사용
- 전송과 응답의 속도가 빠름



post 방식
- 복잡한 요청을 보낼 때 사용
- 전송할 데이터를 body에 넣어서 요청
- 데이터를 body에 넣어서 요청하기 때문에 노출되지 않음
- 내용의 크기 제한이 없음
- get방식에 비해 속도가 느림


과제.
Javascript시간에 만든 "Day4_회원가입.html" 을 "4_member.jsp" 로 변경하고 입력한 데이터를 "4_member_ok.jsp"에서
출력하는 서버 페이지를 작성해보자
단, 취미는 request.getParameterValues() 를 통해서 전송받음)
			---------------------------
				배열로 저장됨 
					-->출력할때 반복문으로 하면 가능
					
					(post방식으로!)









